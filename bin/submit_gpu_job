#! /usr/bin/python3

import os
import sys
import inspect
import subprocess
from datetime import datetime

# two days in minutes
TWO_DAYS = 2 * 24 * 60


def write_slurm_template(script, out_path, arguments,
                         n_threads, gpu_type, n_gpus,
                         mem_limit, time_limit, qos,
                         mail_address, exclude_nodes):
    slurm_template = ("#!/bin/bash\n"
                      "#SBATCH -A kreshuk\n"
                      "#SBATCH -N 1\n"
                      "#SBATCH -c %s\n"
                      "#SBATCH --mem %s\n"
                      "#SBATCH -t %i\n"
                      "#SBATCH --qos=%s\n"
                      "#SBATCH -p gpu\n"
                      "#SBATCH -C gpu=%s\n"
                      "#SBATCH --gres=gpu:%i\n") % (n_threads,
                                                    mem_limit, time_limit,
                                                    qos, gpu_type, n_gpus)
    if mail_address is not None:
        slurm_template += ("#SBATCH --mail-type=FAIL,BEGIN,END\n"
                           "#SBATCH --mail-user=%s\n") % mail_address
    if exclude_nodes is not None:
        slurm_template += "#SBATCH --exclude=%s\n" % ",".join(exclude_nodes)

    slurm_template += ("\n"
                       "source activate_gpu_env\n"
                       "\n"
                       "export ON_CLUSTER=1\n"  # we set this env variable, so that script know we're on slurm
                       "$GPU_PY %s %s \n") % (script, arguments)
    with open(out_path, 'w') as f:
        f.write(slurm_template)


def submit_slurm(script, input_, n_threads=7, n_gpus=1,
                 gpu_type='2080Ti', mem_limit='64G',
                 time_limit=TWO_DAYS, qos='normal',
                 mail_address=None,
                 exclude_nodes=None):
    """ Submit python script that needs gpus with given inputs on a slurm node.
    """

    tmp_folder = os.path.expanduser('~/.gpu_submissions')
    os.makedirs(tmp_folder, exist_ok=True)

    arguments = " ".join(input_)
    print("Submitting gpu script %s to cluster" % script)
    print("with arguments:", arguments)

    script_name = os.path.split(script)[1]
    dt = datetime.now().strftime('%Y_%m_%d_%H_%M_%S_%f')
    batch_script = os.path.join(tmp_folder, f'{os.path.splitext(script_name)[0]}_{dt}.sh')

    print("Batch script saved at", batch_script)
    write_slurm_template(script, batch_script, arguments,
                         int(n_threads), gpu_type, int(n_gpus),
                         mem_limit, int(time_limit), qos, mail_address,
                         exclude_nodes=exclude_nodes)

    cmd = ['sbatch', '-J', script_name, batch_script]
    subprocess.run(cmd)


def scrape_kwargs(input_):
    params = inspect.signature(submit_slurm).parameters
    kwarg_names = [name for name in params
                   if params[name].default != inspect._empty]
    kwarg_positions = [i for i, inp in enumerate(input_)
                       if inp.lstrip('-') in kwarg_names]

    kwargs = {input_[i].lstrip('-'): input_[i + 1] for i in kwarg_positions}

    kwarg_positions += [i + 1 for i in kwarg_positions]
    input_ = [inp for i, inp in enumerate(input_) if i not in kwarg_positions]

    return input_, kwargs


if __name__ == '__main__':
    script = os.path.realpath(os.path.abspath(sys.argv[1]))
    input_ = sys.argv[2:]

    # scrape the additional arguments (n_threads, mem_limit, etc. from the input)
    input_, kwargs = scrape_kwargs(input_)
    submit_slurm(script, input_, **kwargs)

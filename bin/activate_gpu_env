# purge models for a clean environment
module purge

# make sure to use the correct python and pip (unalias if 'python'/'pip' exists)
[[ $(type -t python) == "alias" ]] && unalias python
[[ $(type -t pip) == "alias" ]] && unalias pip

# TODO there should be an easier way to do this
# load gcc to find out which architecture we are on
module load GCC
ARCH_NAME=$(which gcc)
ARCH_NAME=$(basename $(dirname $(dirname $(dirname $(dirname $(dirname $ARCH_NAME))))))

# activate the correct conda environment
if [ $# == 1 ]; then
  ENV_NAME=$1
else
  ENV_NAME="cluster_gpu"
fi

ENV_NAME="${ENV_NAME}_$ARCH_NAME"

# activate is not very reliable in getting the right python here, so we construct our path from the base env instead
# source activate $ENV_NAME

# go to base env and derive the python executable of $ENV_NAME from it
# (source activate $ENV_NAME && PY=$(which python) is not 100% reliable, because it sometimes picks up the base env's python)
source activate

PY=$(which python)
PY=$(dirname $(dirname ${PY}))
PY="${PY}/envs/${ENV_NAME}/bin/python"

PIP=$(which pip)
PIP=$(dirname $(dirname ${PIP}))
PIP="${PIP}/envs/${ENV_NAME}/bin/pip"

# activate the correct env
source activate $ENV_NAME

# for some reason the alias doesn't work in sbatch, so export an alternate command
export GPU_PY=$PY

# load the pytorch module and reset the python interpreter to conda
module load PyTorch
alias python=$PY
alias pip=$PIP

#! /usr/bin/python3

import os
import sys
import inspect
import subprocess
import pwd

from datetime import datetime
from pathlib import Path

# two days in minutes
TWO_DAYS = 2 * 24 * 60


def write_slurm_template(
    script,
    out_path,
    arguments,
    n_threads,
    gpu_type,
    n_gpus,
    mem_limit,
    time_limit,
    qos,
    exclude_nodes,
    mail_address,
    array,
    slurm_out_to_scratch,
):
    user = pwd.getpwuid(os.getuid()).pw_name
    slurm_template = (
        f"#!/bin/bash\n"
        f"#SBATCH -A kreshuk\n"
        f"#SBATCH -N 1\n"
        f"#SBATCH -c {n_threads}\n"
        f"#SBATCH --mem {mem_limit}\n"
        f"#SBATCH -t {time_limit}\n"
        f"#SBATCH --qos={qos}\n"
        f"#SBATCH -p gpu\n"
        f"#SBATCH -C gpu={gpu_type}\n"
        f"#SBATCH --gres=gpu:{n_gpus}\n"
    )
    if slurm_out_to_scratch:
        slurm_out = Path(f"/scratch/{user}/slurm_out")
        slurm_out.mkdir(parents=True, exist_ok=True)
        slurm_template += f"#SBATCH -o {slurm_out / '%N.%j.out'}\n"
        slurm_template += f"#SBATCH -e {slurm_out / '%N.%j.err'}\n"

    if mail_address is None and os.environ.get("GPU_ENV_SEND_MAIL", False):
        mail_address = f"{user}@embl.de"

    if mail_address is not None:
        slurm_template += ("#SBATCH --mail-type=FAIL,END\n"  # inactive option: BEGIN
                           f"#SBATCH --mail-user={mail_address}\n")

    if exclude_nodes is not None:
        slurm_template += "#SBATCH --exclude=%s\n" % ",".join(exclude_nodes)

    if array is not None:
        slurm_template += f"#SBATCH --array={array}"

    slurm_template += ("\n"
                       f"source {Path(__file__).parent / 'activate_gpu_env'} {os.environ.get('CLUSTER_GPU_ENV', 'cluster_gpu')}\n"
                       "\n"
                       "export ON_CLUSTER=1\n"  # we set this env variable, so that script know we're on slurm
                       "$GPU_PY %s %s \n") % (script, arguments)

    with open(out_path, 'w') as f:
        f.write(slurm_template)


def submit_slurm(
    script,
    input_,
    n_threads=7,
    n_gpus=1,
    gpu_type="2080Ti",
    mem_limit="64G",
    time_limit=TWO_DAYS,
    qos="normal",
    mail_address=None,
    array=None,
    exclude_nodes=None,
    slurm_out_to_scratch: bool = False,
):
    """ Submit python script that needs gpus with given inputs on a slurm node.
    """

    tmp_folder = os.path.expanduser('~/.gpu_submissions')
    os.makedirs(tmp_folder, exist_ok=True)

    arguments = " ".join(input_)
    print("Submitting gpu script %s to cluster" % script)
    print("with arguments:", arguments)

    script_name = os.path.split(script)[1]
    dt = datetime.now().strftime('%Y_%m_%d_%H_%M_%S_%f')
    batch_script = os.path.join(tmp_folder, f'{os.path.splitext(script_name)[0]}_{dt}.sh')

    print("Batch script saved at", batch_script)
    write_slurm_template(
        script,
        batch_script,
        arguments,
        int(n_threads),
        gpu_type,
        int(n_gpus),
        mem_limit,
        int(time_limit),
        qos,
        exclude_nodes=exclude_nodes,
        mail_address=mail_address,
        array=array,
        slurm_out_to_scratch=slurm_out_to_scratch,
    )

    cmd = ["sbatch", "-J", script_name, batch_script]
    subprocess.run(cmd)


def scrape_kwargs(input_):
    params = inspect.signature(submit_slurm).parameters
    kwarg_names = [name for name in params
                   if params[name].default != inspect._empty]
    kwarg_positions = [i for i, inp in enumerate(input_)
                       if inp.lstrip('-') in kwarg_names]

    kwargs = {input_[i].lstrip('-'): input_[i + 1] for i in kwarg_positions}

    kwarg_positions += [i + 1 for i in kwarg_positions]
    input_ = [inp for i, inp in enumerate(input_) if i not in kwarg_positions]

    return input_, kwargs


if __name__ == '__main__':
    script = os.path.realpath(os.path.abspath(sys.argv[1]))
    input_ = sys.argv[2:]

    # scrape the additional arguments (n_threads, mem_limit, etc. from the input)
    input_, kwargs = scrape_kwargs(input_)
    submit_slurm(script, input_, **kwargs)
